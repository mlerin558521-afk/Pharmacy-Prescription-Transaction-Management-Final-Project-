import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class PaymentUserPanel extends JPanel {
    private ShopPanel shopPanel;
    private JLabel lblTitle, lblTotal, lblSelectedMethod;
    private JButton btnPay;
    private JPanel paymentOptionsPanel;
    private String selectedMethod = null;

    public PaymentUserPanel(ShopPanel shopPanel) {
        this.shopPanel = shopPanel;
        setLayout(new BorderLayout(20, 20));
        setBackground(Color.WHITE);
        setBorder(new EmptyBorder(30, 50, 30, 50));

        lblTitle = new JLabel("Checkout", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Segoe UI", Font.BOLD, 28));
        lblTitle.setForeground(new Color(33, 150, 243));
        add(lblTitle, BorderLayout.NORTH);

        JPanel centerPanel = new JPanel(new BorderLayout(10, 10));
        centerPanel.setBackground(Color.WHITE);

        lblTotal = new JLabel("Total: â‚±" + String.format("%.2f", shopPanel.getTotalCost()), SwingConstants.CENTER);
        lblTotal.setFont(new Font("Segoe UI", Font.BOLD, 22));
        lblTotal.setForeground(new Color(46, 125, 50));
        centerPanel.add(lblTotal, BorderLayout.NORTH);

        paymentOptionsPanel = new JPanel(new GridLayout(1, 2, 25, 25));
        paymentOptionsPanel.setOpaque(false);
        paymentOptionsPanel.setBorder(new EmptyBorder(20, 0, 10, 0));
        paymentOptionsPanel.add(createPaymentCard("Cash", "ðŸ’µ"));
        paymentOptionsPanel.add(createPaymentCard("Card", "ðŸ’³"));
        centerPanel.add(paymentOptionsPanel, BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel(new BorderLayout(10, 10));
        bottomPanel.setBackground(Color.WHITE);

        lblSelectedMethod = new JLabel("No payment method selected", SwingConstants.CENTER);
        lblSelectedMethod.setFont(new Font("Segoe UI", Font.ITALIC, 14));
        lblSelectedMethod.setForeground(Color.GRAY);
        bottomPanel.add(lblSelectedMethod, BorderLayout.NORTH);

        btnPay = new JButton("Pay Now");
        btnPay.setFont(new Font("Segoe UI", Font.BOLD, 18));
        btnPay.setBackground(new Color(76, 175, 80));
        btnPay.setForeground(Color.WHITE);
        btnPay.setFocusPainted(false);
        btnPay.setBorder(new EmptyBorder(10, 20, 10, 20));
        btnPay.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnPay.addActionListener(e -> processPayment());
        bottomPanel.add(btnPay, BorderLayout.SOUTH);

        centerPanel.add(bottomPanel, BorderLayout.SOUTH);
        add(centerPanel, BorderLayout.CENTER);
    }

    private JPanel createPaymentCard(String method, String iconText) {
        JPanel card = new JPanel(new BorderLayout());
        card.setBorder(new LineBorder(new Color(220, 220, 220), 2, true));
        card.setBackground(new Color(250, 250, 250));
        card.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        JLabel icon = new JLabel(iconText, SwingConstants.CENTER);
        icon.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 40));

        JLabel label = new JLabel(method, SwingConstants.CENTER);
        label.setFont(new Font("Segoe UI", Font.BOLD, 18));
        label.setForeground(new Color(60, 60, 60));

        card.add(icon, BorderLayout.CENTER);
        card.add(label, BorderLayout.SOUTH);

        card.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                selectedMethod = method;
                lblSelectedMethod.setText("Selected: " + method);
                lblSelectedMethod.setForeground(new Color(33, 150, 243));
                resetCardBorders();
                card.setBorder(new LineBorder(new Color(33, 150, 243), 3, true));
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                if (!method.equals(selectedMethod)) {
                    card.setBorder(new LineBorder(new Color(180, 180, 180), 2, true));
                }
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (!method.equals(selectedMethod)) {
                    card.setBorder(new LineBorder(new Color(220, 220, 220), 2, true));
                }
            }
        });

        return card;
    }

    private void resetCardBorders() {
        for (Component c : paymentOptionsPanel.getComponents()) {
            if (c instanceof JPanel) {
                ((JPanel) c).setBorder(new LineBorder(new Color(220, 220, 220), 2, true));
            }
        }
    }

    public void updateTotal() {
        lblTotal.setText("Total: â‚±" + String.format("%.2f", shopPanel.getTotalCost()));
    }

    private void processPayment() {
        if (shopPanel.getCartModel().getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Your cart is empty!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (selectedMethod == null) {
            JOptionPane.showMessageDialog(this, "Please select a payment method first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (selectedMethod.equals("Cash")) {
            handleCashPayment();
        } else if (selectedMethod.equals("Card")) {
            handleCardPayment();
        }
    }

    private void handleCashPayment() {
        String input = JOptionPane.showInputDialog(this, "Enter amount paid:", "Cash Payment", JOptionPane.PLAIN_MESSAGE);
        if (input == null) return;

        try {
            double paid = Double.parseDouble(input);
            double total = shopPanel.getTotalCost();
            if (paid < total) {
                JOptionPane.showMessageDialog(this, "Insufficient amount!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            double change = paid - total;
            String receipt = generateReceipt("Cash", paid, change);
            showAndSaveReceipt(receipt);
            resetAfterPayment();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid amount entered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void handleCardPayment() {
        JTextField name = new JTextField();
        JTextField number = new JTextField();
        JTextField amount = new JTextField();

        Object[] message = {
            "Cardholder Name:", name,
            "Card Number:", number,
            "Amount to Pay:", amount
        };

        int result = JOptionPane.showConfirmDialog(this, message, "Card Payment", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            try {
                double paid = Double.parseDouble(amount.getText());
                double total = shopPanel.getTotalCost();
                if (paid < total) {
                    JOptionPane.showMessageDialog(this, "Insufficient payment!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                double change = paid - total;
                String receipt = generateReceipt("Card (" + name.getText() + ")", paid, change);
                showAndSaveReceipt(receipt);
                resetAfterPayment();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid amount!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void resetAfterPayment() {
        shopPanel.getCartModel().setRowCount(0);
        shopPanel.resetTotal();
        updateTotal();
        selectedMethod = null;
        lblSelectedMethod.setText("No payment method selected");
        lblSelectedMethod.setForeground(Color.GRAY);
        resetCardBorders();
    }

    private String generateReceipt(String method, double paid, double change) {
        StringBuilder sb = new StringBuilder();
        sb.append("====================================\n");
        sb.append("           PHARMACY\n");
        sb.append("====================================\n");
        sb.append("Date: ").append(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))).append("\n");
        sb.append("Payment Method: ").append(method).append("\n\n");
        sb.append("Items Purchased:\n");
        sb.append("------------------------------------\n");
        for (int i = 0; i < shopPanel.getCartModel().getRowCount(); i++) {
            String name = shopPanel.getCartModel().getValueAt(i, 0).toString();
            String qty = shopPanel.getCartModel().getValueAt(i, 1).toString();
            String price = shopPanel.getCartModel().getValueAt(i, 2).toString();
            sb.append(String.format("%-15s x%-3s â‚±%s\n", name, qty, price));
        }
        sb.append("------------------------------------\n");
        sb.append(String.format("Total: â‚±%.2f\n", shopPanel.getTotalCost()));
        sb.append(String.format("Paid: â‚±%.2f\n", paid));
        sb.append(String.format("Change: â‚±%.2f\n", change));
        sb.append("====================================\n");
        sb.append("  Thank you for your purchase!\n");
        sb.append("====================================\n");
        return sb.toString();
    }

    private void showAndSaveReceipt(String receipt) {
        JTextArea textArea = new JTextArea(receipt);
        textArea.setEditable(false);
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 13));
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(400, 400));
        JOptionPane.showMessageDialog(this, scrollPane, "Receipt", JOptionPane.INFORMATION_MESSAGE);

        try {
            String fileName = "receipt_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")) + ".txt";
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
            writer.write(receipt);
            writer.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving receipt file!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
