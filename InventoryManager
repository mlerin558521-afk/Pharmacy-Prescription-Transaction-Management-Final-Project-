import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.*;
import java.util.*;
import java.util.List;

public class InventoryManager {

    private static final String FILE_NAME = "inventory.txt";
    private static HashMap<String, InventoryItem> items = new HashMap<>();

    public static class InventoryItem {
        private String name;
        private int quantity;
        private double price;

        public InventoryItem(String name, int quantity, double price) {
            this.name = name;
            this.quantity = quantity;
            this.price = price;
        }

        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        public int getQuantity() { return quantity; }
        public void setQuantity(int quantity) { this.quantity = quantity; }
        public double getPrice() { return price; }
        public void setPrice(double price) { this.price = price; }

        @Override
        public String toString() {
            return name + " | " + quantity + " | " + price;
        }
    }

    public static void loadFromFile() {
        items.clear();
        File f = new File(FILE_NAME);
        if (!f.exists()) return;
        try (BufferedReader br = new BufferedReader(new FileReader(f))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("\\|");
                if (parts.length == 3) {
                    String name = parts[0].trim();
                    int qty = Integer.parseInt(parts[1].trim());
                    double price = Double.parseDouble(parts[2].trim());
                    items.put(name.toLowerCase(), new InventoryItem(name, qty, price));
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error loading inventory: " + e.getMessage());
        }
    }

    public static void saveToFile() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (InventoryItem it : items.values()) {
                bw.write(it.getName() + "|" + it.getQuantity() + "|" + it.getPrice());
                bw.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error saving inventory: " + e.getMessage());
        }
    }

    public static List<InventoryItem> getAllItems() {
        return new ArrayList<>(items.values());
    }

    public static boolean addItem(String name, int qty, double price) {
        String key = name.trim().toLowerCase();
        if (items.containsKey(key)) return false;
        items.put(key, new InventoryItem(name.trim(), qty, price));
        return true;
    }

    public static boolean updateItem(String oldName, String newName, int qty, double price) {
        String oldKey = oldName.trim().toLowerCase();
        if (!items.containsKey(oldKey)) return false;

        String newKey = newName.trim().toLowerCase();
        if (!oldKey.equals(newKey) && items.containsKey(newKey)) return false;

        InventoryItem it = items.get(oldKey);
        it.setName(newName.trim());
        it.setQuantity(qty);
        it.setPrice(price);

        if (!oldKey.equals(newKey)) {
            items.remove(oldKey);
            items.put(newKey, it);
        }
        return true;
    }

    public static boolean deleteItem(String name) {
        String key = name.trim().toLowerCase();
        return items.remove(key) != null;
    }

    public static boolean restockItem(String name, int addQty) {
        String key = name.trim().toLowerCase();
        InventoryItem it = items.get(key);
        if (it == null) return false;
        it.setQuantity(it.getQuantity() + addQty);
        return true;
    }

    public static List<InventoryItem> searchItems(String query) {
        List<InventoryItem> result = new ArrayList<>();
        if (query == null || query.trim().isEmpty()) {
            result.addAll(items.values());
            return result;
        }
        String q = query.trim().toLowerCase();
        for (InventoryItem it : items.values()) {
            if (it.getName().toLowerCase().contains(q)) result.add(it);
        }
        return result;
    }

    public static DefaultTableModel toAdminTableModel(List<InventoryItem> list) {
        String[] cols = {"Medicine Name", "Quantity", "Price"};
        DefaultTableModel model = new DefaultTableModel(cols, 0) {
            @Override
            public boolean isCellEditable(int row, int column) { return false; }
        };
        for (InventoryItem it : list) {
            model.addRow(new Object[]{it.getName(), it.getQuantity(), it.getPrice()});
        }
        return model;
    }

    public static DefaultTableModel toShopTableModel(List<InventoryItem> list) {
        String[] cols = {"Medicine", "Price"};
        DefaultTableModel model = new DefaultTableModel(cols, 0) {
            @Override
            public boolean isCellEditable(int row, int column) { return false; }
        };
        for (InventoryItem it : list) {
            model.addRow(new Object[]{it.getName(), it.getPrice()});
        }
        return model;
    }

    public static class InventoryFrame extends JFrame {
        private DefaultTableModel tableModel;
        private JTable table;
        private JTextField searchField;
        private JLabel searchTimeLabel;

        public InventoryFrame() {
            setTitle("Inventory Manager");
            setSize(700, 450);
            setLocationRelativeTo(null);
            setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            setLayout(new BorderLayout(8, 8));

            loadFromFile();

            JPanel top = new JPanel(new BorderLayout(6, 6));
            top.setBackground(new Color(64, 224, 208));

            JLabel title = new JLabel("Inventory Manager", SwingConstants.CENTER);
            title.setFont(new Font("Arial", Font.BOLD, 18));
            title.setForeground(Color.BLACK);
            top.add(title, BorderLayout.CENTER);

            JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 8));
            searchPanel.setBackground(new Color(240, 248, 255));

            JLabel searchLbl = new JLabel("Search:");
            searchLbl.setFont(new Font("Segoe UI", Font.BOLD, 13));

            searchField = new JTextField(18);
            searchField.setFont(new Font("Segoe UI", Font.PLAIN, 13));

            JButton searchBtn = new JButton("Search");
            JButton refreshBtn = new JButton("Refresh");

            Color btnColor = new Color(0, 123, 255);
            for (JButton b : new JButton[]{searchBtn, refreshBtn}) {
                b.setBackground(btnColor);
                b.setForeground(Color.WHITE);
                b.setFont(new Font("Segoe UI", Font.BOLD, 12));
            }

            searchPanel.add(searchLbl);
            searchPanel.add(searchField);
            searchPanel.add(searchBtn);
            searchPanel.add(refreshBtn);

            JLabel searchTimeLabel = new JLabel(" ");
            searchTimeLabel.setFont(new Font("Arial", Font.ITALIC, 12));
            searchTimeLabel.setForeground(Color.DARK_GRAY);
            searchTimeLabel.setHorizontalAlignment(SwingConstants.CENTER);

            JPanel searchContainer = new JPanel(new BorderLayout());
            searchContainer.setBackground(new Color(240, 248, 255));
            searchContainer.add(searchPanel, BorderLayout.NORTH);
            searchContainer.add(searchTimeLabel, BorderLayout.SOUTH);

            top.add(searchContainer, BorderLayout.SOUTH);
            add(top, BorderLayout.NORTH);

            tableModel = InventoryManager.toAdminTableModel(getAllItems());
            table = new JTable(tableModel);
            table.getTableHeader().setBackground(new Color(64, 224, 208));
            table.getTableHeader().setForeground(Color.BLACK);
            table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));
            add(new JScrollPane(table), BorderLayout.CENTER);

            JPanel bottom = new JPanel();
            bottom.setBackground(new Color(144, 238, 144));

            JButton addBtn = new JButton("Add");
            JButton updateBtn = new JButton("Update");
            JButton deleteBtn = new JButton("Delete");
            JButton restockBtn = new JButton("Restock");
            JButton saveCloseBtn = new JButton("Save & Close");

            for (JButton b : new JButton[]{addBtn, updateBtn, deleteBtn, restockBtn, saveCloseBtn}) {
                b.setBackground(btnColor);
                b.setForeground(Color.WHITE);
            }

            bottom.add(addBtn);
            bottom.add(updateBtn);
            bottom.add(deleteBtn);
            bottom.add(restockBtn);
            bottom.add(saveCloseBtn);
            add(bottom, BorderLayout.SOUTH);

            searchBtn.addActionListener(e -> {
                String q = searchField.getText().trim();

                long startTime = System.nanoTime();
                List<InventoryItem> found = searchItems(q);
                long endTime = System.nanoTime();

                long durationNano = endTime - startTime;
                long durationMillis = durationNano / 1_000_000;
                long seconds = (durationMillis / 1000) % 60;
                long minutes = (durationMillis / (1000 * 60)) % 60;

                String timeText;
                if (minutes > 0) {
                    timeText = String.format("Search completed in %d minute%s and %d second%s • Results: %d",
                            minutes, (minutes > 1 ? "s" : ""), seconds, (seconds != 1 ? "s" : ""), found.size());
                } else {
                    timeText = String.format("Search completed in %d second%s • Results: %d",
                            seconds, (seconds != 1 ? "s" : ""), found.size());
                }

                tableModel = toAdminTableModel(found);
                table.setModel(tableModel);

                searchTimeLabel.setText(timeText);
            });


            addBtn.addActionListener(e -> openAddDialog());
            updateBtn.addActionListener(e -> openUpdateDialog());

            deleteBtn.addActionListener(e -> {
                int sel = table.getSelectedRow();
                if (sel == -1) {
                    JOptionPane.showMessageDialog(this, "Select an item to delete.");
                    return;
                }
                String name = table.getValueAt(sel, 0).toString();
                int confirm = JOptionPane.showConfirmDialog(this,
                        "Delete " + name + " ?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    deleteItem(name);
                    saveToFile();
                    refreshTable();
                }
            });

            restockBtn.addActionListener(e -> {
                int sel = table.getSelectedRow();
                if (sel == -1) {
                    JOptionPane.showMessageDialog(this, "Select an item to restock.");
                    return;
                }
                String name = table.getValueAt(sel, 0).toString();
                String s = JOptionPane.showInputDialog(this, "Enter quantity to add for " + name + ":");
                if (s == null) return;
                try {
                    int add = Integer.parseInt(s.trim());
                    if (add <= 0) {
                        JOptionPane.showMessageDialog(this, "Enter a positive number.");
                        return;
                    }
                    restockItem(name, add);
                    saveToFile();
                    refreshTable();
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Invalid number.");
                }
            });

            saveCloseBtn.addActionListener(e -> {
                saveToFile();
                dispose();
            });

            setVisible(true);
        }

        private void refreshTable() {
            loadFromFile();
            tableModel = toAdminTableModel(getAllItems());
            table.setModel(tableModel);
        }

        private void openAddDialog() {
            JTextField nameField = new JTextField();
            JTextField qtyField = new JTextField();
            JTextField priceField = new JTextField();
            final JComponent[] inputs = new JComponent[]{
                    new JLabel("Medicine Name:"), nameField,
                    new JLabel("Quantity (integer):"), qtyField,
                    new JLabel("Price (e.g. 12.50):"), priceField
            };
            int result = JOptionPane.showConfirmDialog(this, inputs, "Add Medicine", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                String name = nameField.getText().trim();
                try {
                    int qty = Integer.parseInt(qtyField.getText().trim());
                    double price = Double.parseDouble(priceField.getText().trim());
                    if (name.isEmpty() || qty < 0 || price < 0) {
                        JOptionPane.showMessageDialog(this, "Please enter valid values.");
                        return;
                    }
                    boolean added = addItem(name, qty, price);
                    if (!added) {
                        JOptionPane.showMessageDialog(this, "A medicine with that name already exists.");
                    } else {
                        saveToFile();
                        refreshTable();
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Quantity and price must be numbers.");
                }
            }
        }

        private void openUpdateDialog() {
            int sel = table.getSelectedRow();
            if (sel == -1) {
                JOptionPane.showMessageDialog(this, "Select an item to update.");
                return;
            }
            String oldName = table.getValueAt(sel, 0).toString();
            InventoryItem it = items.get(oldName.toLowerCase());
            if (it == null) {
                JOptionPane.showMessageDialog(this, "Selected item not found.");
                return;
            }

            JTextField nameField = new JTextField(it.getName());
            JTextField qtyField = new JTextField(String.valueOf(it.getQuantity()));
            JTextField priceField = new JTextField(String.valueOf(it.getPrice()));

            final JComponent[] inputs = new JComponent[]{
                    new JLabel("Medicine Name:"), nameField,
                    new JLabel("Quantity (integer):"), qtyField,
                    new JLabel("Price (e.g. 12.50):"), priceField
            };
            int result = JOptionPane.showConfirmDialog(this, inputs, "Update Medicine", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                try {
                    String newName = nameField.getText().trim();
                    int qty = Integer.parseInt(qtyField.getText().trim());
                    double price = Double.parseDouble(priceField.getText().trim());
                    if (newName.isEmpty() || qty < 0 || price < 0) {
                        JOptionPane.showMessageDialog(this, "Please enter valid values.");
                        return;
                    }
                    boolean updated = updateItem(oldName, newName, qty, price);
                    if (!updated) {
                        JOptionPane.showMessageDialog(this, "Update failed (maybe new name already exists).");
                    } else {
                        saveToFile();
                        refreshTable();
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Quantity and price must be numbers.");
                }
            }
        }
    }


    public static void main(String[] args) {
        SwingUtilities.invokeLater(InventoryFrame::new);
    }
}
